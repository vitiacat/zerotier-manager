name: Build and Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

env:
  PROJECT_NAME: zerotier-manager

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive_ext: .zip
            binary_ext: .exe

          # Linux x86_64 (amd64)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive_ext: .tar.gz
            binary_ext: ""

          # Linux aarch64 (arm64)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive_ext: .tar.gz
            binary_ext: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (for aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Package artifacts
        shell: bash
        run: |
          ARTIFACT_PATH="target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}${{ matrix.binary_ext }}"

          ASSET_NAME="${{ env.PROJECT_NAME }}-${{ matrix.target }}${{ matrix.archive_ext }}"
          
          echo "Artifact path: ${ARTIFACT_PATH}"
          echo "Asset name: ${ASSET_NAME}"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "${ASSET_NAME}" "${ARTIFACT_PATH}"
          else
            tar -czf "${ASSET_NAME}" -C "target/${{ matrix.target }}/release" "${{ env.PROJECT_NAME }}${{ matrix.binary_ext }}"
          fi

          echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_NAME }}

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/*/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true